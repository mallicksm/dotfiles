{
   "#define macro": {
      "prefix": "#def",
      "body": ["#define ${1:MACRO}"],
      "description": "Textual macro snippet"
   },
   "#define macro()": {
      "prefix": "#deff",
      "body": ["#define ${1:MACRO}($2) ($3)"],
      "description": "Function-like macro snippet"
   },
   "Function ...": {
      "prefix": "fun",
      "body": ["${2:void} ${1:fun}(${3:void})$0"],
      "description": "Make a function declaration/definition/pointer"
   },
   "Function definition": {
      "prefix": "func",
      "body": ["${2:void} ${1:fun}(${3:void})", "{$0", "}"],
      "description": "Define a function"
   },
   "typedef": {
      "prefix": "typedef",
      "body": ["typedef ${1:void} ${2:Emptiness};"],
      "description": "'typedef' snippet"
   },
   "Complicated typedef": {
      "prefix": "typedeff",
      "body": ["typedef $0;"],
      "description": "Declaration-like typedef for func-ptr,array,etc."
   },
   "typedef struct": {
      "prefix": "typedefst",
      "body": ["typedef struct $1 ${1:Box};"],
      "description": "Implicit struct typedef"
   },
   "typedef union": {
      "prefix": "typedefun",
      "body": ["typedef union $1 ${1:Cell};"],
      "description": "Implicit union typedef"
   },
   "struct type": {
      "prefix": "typestruct",
      "body": [
         "typedef struct $1 ${1:Box};",
         "struct $1 {$0",
         "};"
      ],
      "description": "Define a type with struct"
   },
   "union type": {
      "prefix": "typeunion",
      "body": [
         "typedef union $1 ${1:Cell};",
         "union $1 {$0",
         "};"
      ],
      "description": "Define a type with union"
   },
   "union": {
      "prefix": "union",
      "body": ["union ${1:MyUnion} {$0", "};"],
      "description": "'union' snippet"
   },
   "struct": {
      "prefix": "struct",
      "body": ["struct ${1:MyStruct} {$0", "};"],
      "description": "'struct' snippet"
   },
   "enum": {
      "prefix": "enum",
      "body": ["enum $1{ $0 };"],
      "description": "Define an enumeration"
   },
   "printf": {
      "prefix": "printf",
      "body": ["printf(\"${1:%s}\\n\"$2);"],
      "description": "printf() snippet"
   },
   "mrs": {
      "prefix": ["mrs"],
      "body": [
         "__asm volatile(\"mrs %0, ${1:reg}\" : \"=r\"(${2:var}));"
      ]
   },
   "msr": {
      "prefix": ["msr"],
      "body": [
         "__asm volatile(\"msr %0, ${1:reg}\" : : \"r\"(${2:var}));"
      ]
   },
   "asm": {
      "prefix": ["asm"],
      "body": ["__asm volatile(\"${1:assembly code}\");"]
   },
   "easm": {
      "prefix": ["easm"],
      "body": [
         "__asm volatile(\"${1:assembly_code}\"",
         "      : ${2:\"=r\"(output_cvariable)}",
         "      : ${3:\"r\"(input_cvariable)}",
         "      : ${4:\"clobberlist\"});"
      ]
   },
   "barrier": {
      "prefix": ["barrier"],
      "body": [
         "// Compiler Barrier",
         "//   compiler nukes regsiter cache of memory",
         "//   gcc/armclang re-fetches into registers",
         "//   no assembly instructions are issued",
         "__asm__ volatile (\"\" ::: \"memory\");"
      ]
   },
   "synchronize": {
      "prefix": ["synchronize"],
      "body": [
         "// Tell the C compiler and the CPU to not move loads or stores",
         "// past this point, to ensure that all the stores in the critical",
         "// section are visible to other CPUs before the lock is released,",
         "// and that loads in the critical section occur strictly before",
         "// the lock is released.",
         "// On AArch64 this issues a \"dmb ish\" instruction",
         "__sync_synchronize();"
      ]
   },
   "release": {
      "prefix": ["release"],
      "body": [
         "// Release the lock, equivalent to lk->locked = 0.",
         "// This code doesn't use a C assignment, since the C standard",
         "// implies that an assignment might be implemented with",
         "// multiple store instructions.",
         "// On AArch64 this isues a Store Release Register operation",
         "// Releasing exclusive access held by preceeding LDAXR instruction",
         "// STLR 0 [lk->locked],",
         "__sync_lock_release(&memvar);"
      ]
   },
   "lock": {
      "prefix": ["lock"],
      "body": [
         "// On AArch64, sync_lock_test_and_set turns into an atomic swap:",
         "//   LDAXR Xt [&lk->locked]",
         "//   STLXR Ws Xt [&lk->locked], success when Ws=0",
         "// Implemented: Double loop to check for Ws=0 (inner) and ldaxr.Xt=0 (outer)",
         "localvar = __sync_swap(&memvar, 1);"
      ]
   },
   "attribute": {
      "prefix": ["attribute"],
      "body": [
         "__attribute__((${1|weak,aligned(16),section(\"romdata\"),always_inline,nomerge|})) "
      ]
   }
}
