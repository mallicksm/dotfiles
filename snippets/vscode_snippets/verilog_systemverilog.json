{
   "item module": {
      "prefix": ["module"],
      "body": [
         "module $TM_FILENAME_BASE (",
         "   ${1:/* statements */};",
         ");",
         "\nendmodule // $TM_FILENAME_BASE"
      ],
      "description": "Code snippet for module"
   },
   "item if statement": {
      "prefix": ["if"],
      "body": [
         "if ($1) begin",
         "   ${2:/* statements */};",
         "end"
      ],
      "description": "Code snippet for if statement"
   },
   "item if-else": {
      "prefix": ["if-else", "ife"],
      "body": [
         "if ($1) begin",
         "   ${2:/* statements */};",
         "end",
         "else begin",
         "   ${3:/* statements */};",
         "end"
      ],
      "description": "Code snippet for if else statement"
   },
   "item case": {
      "prefix": ["case", "switch"],
      "body": [
         "case $1",
         "   ${1:/* statements */}",
         "endcase"
      ],
      "description": "Code snippet for case statement"
   },
   "item always": {
      "prefix": ["always"],
      "body": [
         "always @(${1|posedge clk,posedge clk or negedge rstn,*|}) begin",
         "   ${2:/* statements */}",
         "end"
      ],
      "description": "Code snippet for always statement"
   },
   "item generate": {
      "prefix": ["generate"],
      "body": [
         "generate",
         "   ${1:/* statements */}",
         "endgenerate"
      ],
      "description": "Code snippet for generate keywords"
   },
   "item input": {
      "prefix": ["input"],
      "body": ["input  ${1|wire,reg|} $0;"],
      "description": "Code snippet for INPUT statement"
   },
   "item output": {
      "prefix": ["output"],
      "body": ["output ${1|wire,reg|} ${0};"],
      "description": "Code snippet for output statement"
   },
   "item begin": {
      "prefix": ["begin"],
      "body": [
         "begin",
         "   ${1:/* inside statements */};",
         "end"
      ],
      "description": "Code snippet for begin statement"
   },
   "item map-delays": {
      "prefix": ["map-delays"],
      "body": [
         "`ifdef MAP_DELAYS",
         "   initial \\$ixc_ctrl(\"map_delays\");",
         "   reg out1;",
         "   always begin #1; out1 = ~(i1 & i0); end",
         "`else",
         "   wire out1_before_delay;",
         "   assign out1_before_delay = ~(i1 & i0);",
         "   Q_FDP0B u_d_prev(.Q(out1), .D(out1_before_delay));",
         "`endif"
      ],
      "description": "Code snippet for 'map-delays' statement"
   },
   "item map-bc": {
      "prefix": ["map-bc"],
      "body": [
         "`ifdef IXCOM_COMPILE",
         "    _ixc_clkgen ixc_clkgen();",
         "    initial \\$ixc_ctrl(\"map_bc\");",
         "    initial \\$ixc_ctrl(\"tb_import\",\"\\$display\");",
         "    initial \\$ixc_ctrl(\"tb_import\",\"\\$stop\");",
         "`endif"
      ]
   },
   "item tran": {
      "prefix": ["tran"],
      "body": [
         "// usage: xtran #(.W(4)) i_xtran (busA[3:0], busB[3:0]) ",
         "module xtran(T,T)",
         "   parameter W = 1;",
         "   inout [W-1:0] T;",
         "endmodule: xtran"
      ],
      "description": "Code snippet for 'xtran' statement"
   }
}
