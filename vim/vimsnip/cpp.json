{
   "item header": {
      "prefix": ["header"],
      "body": [
         "//=============================================================================",
         "// C++ Programming",
         "// Created: $CURRENT_MONTH_NAME_SHORT-$CURRENT_DATE-$CURRENT_YEAR",
         "// Author: ${VIM:\\$USER}",
         "//",
         "// Note:",
         "//",
         "// Description: ${1:Description}",
         "//",
         "//============================================================================="
      ],
      "description": "insert header code"
   },
   "item main": {
      "prefix": ["main"],
      "body": [
         "int main(int argc, const char** argv) {",
            "   ${1:/* statements */};",
            "   return 0;",
            "}"
      ],
      "description": "Code snippet for main function"
   },
   "item for loop": {
      "prefix": ["for"],
      "body": [
         "for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++) {",
            "   $0",
            "}"
      ],
      "description": "Code snippet for 'for' loop"
   },
   "item foreach": {
      "prefix": ["foreach"],
      "body": [
         "for(auto ${var} : ${collection_to_loop}) {",
            "   $0",
            "}"
      ],
      "description": "Code snippet for range-based for loop (c++11) statement"
   },
   "item while loop": {
      "prefix": ["while"],
      "body": [
         "while ($1) {",
            "   $0",
            "}"
      ],
      "description": "Code snippet for while loop"
   },
   "item do": {
      "prefix": ["do"],
      "body": [
         "do {",
            "   $0",
            "} while($2);"
      ],
      "description": "Code snippet for do...while loop"
   },
   "item if": {
      "prefix": ["if"],
      "body": [
         "if ($1) {",
            "   $0",
            "}"
      ],
      "description": "Code snippet for if statement"
   },
   "item enum": {
      "prefix": ["enum"],
      "body": [
         "enum ${MyEnum} {",
            "   $0",
            "};"
      ],
      "description": "Code snippet for enum"
   },
   "item enum class": {
      "prefix": ["enum class"],
      "body": [
         "enum class ${MyClass} { };"
      ],
      "description": "Code snippet for enum class (c++11)"
   },
   "item class": {
      "prefix": ["class"],
      "body": [
         "class ${MyClass} {",
            "public:",
            "   ${MyClass}();",
            "   ${MyClass}(${MyClass} &&) = default;",
            "   ${MyClass}(const ${MyClass} &) = default;",
            "   ${MyClass} &operator=(${MyClass} &&) = default;",
            "   ${MyClass} &operator=(const ${MyClass} &) = default;",
            "   ~${MyClass}();",
            "",
            "private:",
            "   $1",
            "};",
            "",
            "${MyClass}::${MyClass}() {",
               "}",
               "",
               "${MyClass}::~${MyClass}() {",
                  "}"
      ],
      "description": "Code snippet for class"
   },
   "item interface": {
      "prefix": ["interface"],
      "body": [
         "__interface I${Interface} {",
            "   $0",
            "};"
      ],
      "description": "Code snippet for interface (Visual C++)"
   },
   "item namespace": {
      "prefix": ["namespace"],
      "body": [
         "namespace ${MyNamespace} {",
            "   $0",
            "}"
      ],
      "description": "Code snippet for namespace"
   },
   "item #ifdef": {
      "prefix": ["#ifdef"],
      "body": [
         "#ifdef ${DEBUG}",
         "$1",
         "${3:/* statements */}",
         "#endif // ${DEBUG}"
      ],
      "description": "Code snippet for #ifdef"
   },
   "item #ifndef": {
      "prefix": ["#ifndef"],
      "body": [
         "#ifndef ${1:1}",
         "$2",
         "${3:/* statements */}",
         "#endif // !$1"
      ],
      "description": "Code snippet for #ifndef"
   },
   "item #if": {
      "prefix": ["#if"],
      "body": [
         "#ifdef ${1:0}",
         "$2",
         "#endif // $1"
      ],
      "description": "Code snippet for #if"
   },
   "item struct": {
      "prefix": ["struct"],
      "body": [
         "struct ${MyStruct} {",
            "   ${1:/* statements */}",
            "};"
      ],
      "description": "Code snippet for struct"
   },
   "item switch": {
      "prefix": ["switch", "case"],
      "body": [
         "switch (${switch_on}) {",
            "default:",
            "   break;$1",
            "}"
      ],
      "description": "Code snippet for switch statement"
   },
   "item union": {
      "prefix": ["union"],
      "body": [
         "union ${MyUnion} {",
            "   ${1:/* statements */}",
            "};"
      ],
      "description": "Code snippet for union"
   },
   "item cout": {
      "prefix": ["cout"],
      "body": [
         "std::cout << \"${1:/* message */}\" << std::endl;"
      ],
      "description": "Code snippet for printing to std::cout, provided the header is set"
   },
   "item #inc": {
      "prefix": ["#inc"],
      "body": [
         "#include \"$1\""
      ],
      "description": "Code snippet for #include \" \""
   },
   "item #inc<": {
      "prefix": ["#inc<"],
      "body": [
         "#include <$1>"
      ],
      "description": "Code snippet for #include \" \""
   },
   "item #def": {
      "prefix": ["#def"],
      "body": [
         "#define \"$1\" \"$2\" "
      ],
      "description": "Code snippet for #define \" \""
   },
   "mrs": {
     "prefix": ["mrs"],
     "body": [
       "__asm volatile(\"mrs %0, ${1:reg}\" : \"=r\"(${2:var}));"
     ]
   },
   "msr": {
     "prefix": ["msr"],
     "body": [
       "__asm volatile(\"msr %0, ${1:reg}\" : : \"r\"(${2:var}));"
     ]
   },
   "asm": {
     "prefix": ["asm"],
     "body": [
       "__asm volatile(\"${1:assembly code}\");"
     ]
   }
}
