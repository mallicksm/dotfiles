{
   "item header": {
      "prefix": ["header"],
      "body": [
         "#===============================================================================",
         "# Makefile",
         "# Created: $CURRENT_MONTH_NAME_SHORT-$CURRENT_DATE-$CURRENT_YEAR",
         "# Author: ${VIM:\\$USER}",
         "#",
         "# Note:",
         "#",
         "# Description: ${1:Description}",
         "#",
         "#===============================================================================",
         "SHELL = bash",
         ".ONESHELL:",
         ".SHELLFLAGS := -eu -o pipefail -c",
         ".DELETE_ON_ERROR:",
         "MAKEFLAGS += --warn-undefined-variables",
         "MAKEFLAGS += --no-builtin-rules",
         ".DEFAULT_GOAL := all",
         "$0"
      ],
      "description": "Code snippet for 'trigger' statement"
   },
   "item phony": {
      "prefix": ["phony", "phoney"],
      "body": [
         ".PHONY: ${1:target}",
         "$0"
      ],
      "description": "Code snippet for 'phony' statement"
   },
   "item include": {
      "prefix": ["include"],
      "body": [
         "-include ${1:include_file}"
      ],
      "description": "Code snippet for 'include' statement"
   },
   "item help": {
      "prefix": ["help"],
      "body": [
         "define ${1:Label}",
         "${2:Multiline_help_string}",
         "endef",
         "export $1",
         "help:",
         "\t@echo \"\\$\\$$1\""
      ],
      "description": "Code snippet for 'define' statement"
   },
   "item ifeq statement": {
     "prefix": ["ifeq"],
     "body": [
       "ifeq (\\$(${1:var}), ${2:string})",
       "$3",
       "else",
       "$4",
       "endif"
     ],
     "description": "ifeq statement where variable expansion is tested"
   },
   "item ifdef": {
      "prefix": ["ifdef"],
      "body": [
       "ifdef ${1:var}",
       "$2",
       "else",
       "$3",
       "endif"
      ],
      "description": "Code snippet for 'ifdef' statement"
   },
   "item subst": {
      "prefix": ["subst"],
      "body": [
         "\\$(subst,${1:from},${2:to},${3:text})"
      ],
      "description": "Code snippet for 'subst' statement"
   },
   "item patsubst": {
      "prefix": ["patsubst"],
      "body": [
         "\\$(patsubst,${1:pat},${2:repl},${3:text})"
      ],
      "description": "Code snippet for 'patsubst' statement"
   },
   "item strip": {
      "prefix": ["strip"],
      "body": [
         "\\$(strip ${1:string})"
      ],
      "description": "Code snippet for 'strip' statement"
   },
   "item filter": {
      "prefix": ["filter"],
      "body": [
         "\\$(filter ${1:patterns}, ${2:text})"
      ],
      "description": "Code snippet for 'filter' statement"
   },
   "item filter-out": {
      "prefix": ["filter-out"],
      "body": [
         "\\$(filter-out ${1:patterns}, ${2:text})"
      ],
      "description": "Code snippet for 'filter' statement"
   },
   "item words": {
      "prefix": ["words"],
      "body": [
         "\\$(words ${1:text})"
      ],
      "description": "Code snippet for 'words' statement"
   },
   "item word": {
      "prefix": ["word"],
      "body": [
         "\\$(word,${1:n-th word},${2:text})"
      ],
      "description": "Code snippet for 'word' statement"
   },
   "item firstword": {
      "prefix": ["firstword"],
      "body": [
         "\\$(firstword ${1:text})"
      ],
      "description": "Code snippet for 'firstword' statement"
   },
   "item lastword": {
      "prefix": ["lastword"],
      "body": [
         "\\$(lastword ${1:text})"
      ],
      "description": "Code snippet for 'lastword' statement"
   },
   "item var": {
      "prefix": ["var"],
      "body": [
         "\\$(${1:var}:${2:suffix}=${3:replacement})"
      ],
      "description": "Code snippet for 'var' statement"
   }
}
