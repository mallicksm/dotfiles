{
   "item header": {
      "prefix": ["header"],
      "body": [
         "//=============================================================================",
         "// Python Programming",
         "// Created: $CURRENT_MONTH_NAME_SHORT-$CURRENT_DATE-$CURRENT_YEAR",
         "// Author: ${VIM:\\$USER}",
         "//",
         "// Note:",
         "//",
         "// Description: ${1:Description}",
         "//",
         "//============================================================================="
      ],
      "description": "insert header code"
   },
   "item if": {
      "prefix": ["if"],
      "body": [
         "if ${1:expression}:",
         "   ${2:pass}"
      ],
      "description": "Code snippet for an if statement"
   },
   "item if-else": {
      "prefix": ["if-else", "ife"],
      "body": [
         "if ${1:condition}:",
         "   ${2:pass}",
         "elif ${1:expression}:",
         "   ${3:pass}",
         "else:",
         "   ${4:pass}"
      ],
      "description": "Code snippet for an if statement with else"
   },
   "item while": {
      "prefix": ["while"],
      "body": [
         "while ${1:expression}:",
         "   ${2:pass}"
      ],
      "description": "Code snippet for a while loop"
   },
   "item for": {
      "prefix": ["for"],
      "body": [
         "for ${1:target_list} in ${2:expression_list}:",
         "   ${3:pass}"
      ],
      "description": "Code snippet for a for loop"
   },
   "item try/except": {
      "prefix": ["try/except"],
      "body": [
         "try:",
         "   ${1:pass}",
         "except ${2:expression} as ${3:identifier}:",
         "   ${4:pass}"
      ],
      "description": "Code snippet for a try/except statement"
   },
   "item try/finally": {
      "prefix": ["try/finally"],
      "body": [
         "try:",
         "   ${1:pass}",
         "finally:",
         "   ${2:pass}"
      ],
      "description": "Code snippet for a try/finally statement"
   },
   "item try/except/else": {
      "prefix": ["try/except/else"],
      "body": [
         "try:",
         "   ${1:pass}",
         "except ${2:expression} as ${3:identifier}:",
         "   ${4:pass}",
         "else:",
         "   ${5:pass}"
      ],
      "description": "Code snippet for a try/except/else statement"
   },
   "item try/except/finally": {
      "prefix": ["try/except/finally"],
      "body": [
         "try:",
         "   ${1:pass}",
         "except ${2:expression} as ${3:identifier}:",
         "   ${4:pass}",
         "finally:",
         "   ${5:pass}"
      ],
      "description": "Code snippet for a try/except/finally statement"
   },
   "item try/except/else/finally": {
      "prefix": ["try/except/else/finally"],
      "body": [
         "try:",
         "   ${1:pass}",
         "except ${2:expression} as ${3:identifier}:",
         "   ${4:pass}",
         "else:",
         "   ${5:pass}",
         "finally:",
         "   ${6:pass}"
      ],
      "description": "Code snippet for a try/except/else/finally statement"
   },
   "item with": {
      "prefix": ["with"],
      "body": [
         "with ${1:expression} as ${2:target}:",
         "   ${3:pass}"
      ],
      "description": "Code snippet for a with statement"
   },
   "item def": {
      "prefix": ["def", "proc", "func"],
      "body": [
         "def ${1:funcname}(${2:parameter_list}):",
         "   ${3:pass}"
      ],
      "description": "Code snippet for a function definition"
   },
   "item def(class method)": {
      "prefix": ["def(class method)"],
      "body": [
         "def ${1:funcname}(self, ${2:parameter_list}):",
         "   ${3:pass}"
      ],
      "description": "Code snippet for a class method"
   },
   "item def(static class method)": {
      "prefix": ["def(static class method)"],
      "body": [
         "@staticmethod",
         "def ${1:funcname}(${2:parameter_list}):",
         "   ${3:pass}"
      ],
      "description": "Code snippet for a static class method"
   },
   "item def(abstract class method)": {
      "prefix": ["def(abstract class method)"],
      "body": [
         "def ${1:funcname}(self, ${2:parameter_list}):",
         "   raise NotImplementedError"
      ],
      "description": "Code snippet for an abstract class method"
   },
   "item class": {
      "prefix": ["class"],
      "body": [
         "class ${1:classname}(${2:object}):",
         "   ${3:pass}"
      ],
      "description": "Code snippet for a class definition"
   },
   "item lambda": {
      "prefix": ["lambda"],
      "body": [
         "lambda ${1:parameter_list}: ${2:expression}"
      ],
      "description": "Code snippet for a lambda statement"
   },
   "item if(main)": {
      "prefix": ["__main__"],
      "body": [
         "if __name__ == \"__main__\":",
         "    ${1:pass}"
      ],
      "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
   },
   "item async/def": {
      "prefix": ["async/def"],
      "body": [
         "async def ${1:funcname}(${2:parameter_list}):",
         "   ${3:pass}"
      ],
      "description": "Code snippet for an async statement"
   },
   "item async/for": {
      "prefix": ["async/for"],
      "body": [
         "async for ${1:target} in ${2:iter}:",
         "   ${3:block}"
      ],
      "description": "Code snippet for an async for statement"
   },
   "item async/for/else": {
      "prefix": ["async/for/else"],
      "body": [
         "async for ${1:target} in ${2:iter}:",
         "   ${3:block}",
         "else:",
         "   ${4:block}"
      ],
      "description": "Code snippet for an async for statement with else"
   },
   "item async/with": {
      "prefix": ["async/with"],
      "body": [
         "async with ${1:expr} as ${2:var}:",
         "   ${3:block}"
      ],
      "description": "Code snippet for an async with statement"
   },
   "item ipdb": {
      "prefix": ["ipdb"],
      "body": "import ipdb; ipdb.set_trace()",
      "description": "Code snippet for ipdb debug"
   },
   "item pdb": {
      "prefix": ["pdb"],
      "body": "import pdb; pdb.set_trace()",
      "description": "Code snippet for pdb debug"
   },
   "item pudb": {
      "prefix": ["pudb"],
      "body": "import pudb; pudb.set_trace()",
      "description": "Code snippet for pudb debug"
   },
   "item mark/markdown": {
      "prefix": ["mark","markdown"],
      "body": "# %% [markdown]",
      "description": "Code snippet to add a new markdown cell"
   },
  "Print Statement": {
    "prefix": "print",
    "body": [
      "print(${1})"
    ],
    "description": "Print a value"
  }
}
